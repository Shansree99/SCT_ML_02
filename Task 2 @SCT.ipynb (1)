{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN2wXfuryTLLkhx0x6yJEPy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"uIvCoSEyz6p6"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.cluster import KMeans\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import silhouette_score\n","import seaborn as sns\n","import io\n","\n","# Mall Customers dataset embedded directly in the code\n","data = \"\"\"\n","CustomerID,Gender,Age,Annual Income (k$),Spending Score (1-100)\n","1,Male,19,15,39\n","2,Male,21,15,81\n","3,Female,20,16,6\n","4,Female,23,16,77\n","5,Female,31,17,40\n","6,Female,22,17,76\n","7,Female,35,18,6\n","8,Female,23,18,94\n","9,Male,64,19,3\n","10,Female,30,19,72\n","11,Male,67,19,14\n","12,Female,35,19,99\n","13,Female,58,20,15\n","14,Female,24,20,77\n","15,Male,37,20,13\n","16,Male,22,20,79\n","17,Female,35,21,35\n","18,Male,20,21,66\n","19,Male,52,23,29\n","20,Female,35,23,98\n","21,Male,35,24,35\n","22,Male,25,24,73\n","23,Female,46,25,5\n","24,Male,31,25,73\n","25,Female,54,28,14\n","26,Male,29,28,82\n","27,Female,45,28,32\n","28,Male,35,28,61\n","29,Female,40,29,31\n","30,Female,23,29,87\n","31,Male,60,30,4\n","32,Female,21,30,73\n","33,Male,53,33,4\n","34,Male,18,33,92\n","35,Female,49,33,14\n","36,Female,21,33,81\n","37,Female,42,34,17\n","38,Female,30,34,73\n","39,Female,36,37,26\n","40,Female,20,37,75\n","41,Female,65,38,35\n","42,Male,24,38,92\n","43,Male,48,39,36\n","44,Female,31,39,61\n","45,Female,49,39,28\n","46,Female,24,39,65\n","47,Female,50,40,55\n","48,Female,27,40,47\n","49,Female,29,40,42\n","50,Female,31,40,42\n","51,Female,49,42,52\n","52,Male,33,42,60\n","53,Female,31,43,54\n","54,Female,59,43,60\n","55,Female,50,43,45\n","56,Female,47,43,41\n","57,Female,51,44,50\n","58,Female,69,44,46\n","59,Female,27,46,51\n","60,Male,53,46,46\n","61,Female,70,46,56\n","62,Female,19,46,55\n","63,Female,67,47,52\n","64,Female,54,47,59\n","65,Male,63,48,51\n","66,Female,18,48,59\n","67,Female,43,48,50\n","68,Female,68,48,48\n","69,Male,19,48,59\n","70,Female,32,48,47\n","71,Female,70,49,55\n","72,Female,47,49,42\n","73,Male,60,50,49\n","74,Female,60,50,56\n","75,Male,59,54,47\n","76,Female,26,54,54\n","77,Male,45,54,53\n","78,Male,40,54,48\n","79,Female,23,54,52\n","80,Female,49,54,42\n","81,Male,57,54,51\n","82,Male,38,54,55\n","83,Female,67,54,41\n","84,Female,46,54,44\n","85,Female,21,54,57\n","86,Male,48,54,46\n","87,Female,55,57,58\n","88,Female,22,57,55\n","89,Female,34,58,60\n","90,Female,50,58,46\n","91,Female,68,59,55\n","92,Male,18,59,41\n","93,Female,48,60,49\n","94,Female,40,60,40\n","95,Female,32,60,42\n","96,Male,24,60,52\n","97,Female,47,60,47\n","98,Female,27,60,50\n","99,Male,48,61,42\n","100,Female,20,61,49\n","101,Male,23,62,41\n","102,Female,49,62,48\n","103,Female,67,62,59\n","104,Female,26,62,55\n","105,Female,49,62,56\n","106,Male,21,62,42\n","107,Female,66,63,50\n","108,Male,54,63,46\n","109,Female,68,63,43\n","110,Female,66,63,48\n","111,Female,65,63,52\n","112,Female,19,63,54\n","113,Female,38,64,42\n","114,Female,19,64,46\n","115,Female,18,65,48\n","116,Female,19,65,50\n","117,Female,63,65,43\n","118,Female,49,65,59\n","119,Female,51,67,43\n","120,Female,50,67,57\n","121,Female,27,67,56\n","122,Female,38,67,40\n","123,Female,40,69,58\n","124,Male,39,69,91\n","125,Female,23,70,29\n","126,Female,31,70,77\n","127,Female,43,71,35\n","128,Male,68,71,95\n","129,Male,19,71,11\n","130,Female,32,71,75\n","131,Male,70,72,9\n","132,Female,47,72,75\n","133,Female,60,73,34\n","134,Female,60,73,71\n","135,Male,59,74,5\n","136,Female,26,74,88\n","137,Male,45,75,7\n","138,Female,40,75,73\n","139,Female,23,76,10\n","140,Female,49,76,72\n","141,Male,57,77,5\n","142,Male,38,77,93\n","143,Female,67,78,40\n","144,Female,46,78,87\n","145,Female,21,78,12\n","146,Male,48,78,97\n","147,Female,55,78,36\n","148,Female,22,78,74\n","149,Female,34,78,22\n","150,Female,50,78,90\n","151,Female,68,78,17\n","152,Male,18,78,88\n","153,Female,48,78,20\n","154,Female,40,78,76\n","155,Female,32,78,16\n","156,Male,24,78,89\n","157,Female,47,78,1\n","158,Female,27,78,78\n","159,Male,48,78,1\n","160,Female,20,78,73\n","161,Male,23,78,35\n","162,Female,49,78,93\n","163,Female,67,78,14\n","164,Female,26,78,90\n","165,Female,49,78,28\n","166,Male,21,78,83\n","167,Female,66,78,15\n","168,Male,54,78,13\n","169,Female,68,78,82\n","170,Female,66,78,34\n","171,Female,65,78,15\n","172,Female,19,78,81\n","173,Female,38,78,40\n","174,Female,19,78,83\n","175,Female,18,78,30\n","176,Female,19,78,83\n","177,Female,63,78,10\n","178,Female,49,78,92\n","179,Female,51,78,30\n","180,Female,50,78,70\n","181,Female,27,78,98\n","182,Female,38,78,35\n","183,Female,40,78,86\n","184,Male,39,78,72\n","185,Female,23,78,25\n","186,Female,31,78,73\n","187,Female,43,78,45\n","188,Male,68,78,33\n","189,Male,19,78,68\n","190,Female,32,78,89\n","191,Male,70,78,5\n","192,Female,47,78,44\n","193,Female,60,78,15\n","194,Female,60,78,39\n","195,Male,59,78,22\n","196,Female,26,78,61\n","197,Male,45,78,28\n","198,Female,40,78,82\n","199,Female,23,78,31\n","200,Female,49,78,46\n","\"\"\"\n","\n","# Load data from string\n","df = pd.read_csv(io.StringIO(data))\n","\n","# Rest of your analysis code (same as before)\n","X = df.iloc[:, [3, 4]].values\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","wcss = []\n","for i in range(1, 11):\n","    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n","    kmeans.fit(X_scaled)\n","    wcss.append(kmeans.inertia_)\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(1, 11), wcss, marker='o', linestyle='--')\n","plt.title('Elbow Method')\n","plt.xlabel('Number of clusters')\n","plt.ylabel('WCSS')\n","plt.show()\n","\n","silhouette_scores = []\n","for n_cluster in range(2, 11):\n","    kmeans = KMeans(n_clusters=n_cluster, init='k-means++', random_state=42)\n","    cluster_labels = kmeans.fit_predict(X_scaled)\n","    silhouette_avg = silhouette_score(X_scaled, cluster_labels)\n","    silhouette_scores.append(silhouette_avg)\n","    print(f\"For n_clusters = {n_cluster}, the silhouette score is {silhouette_avg}\")\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(2, 11), silhouette_scores, marker='o')\n","plt.title('Silhouette Score Analysis')\n","plt.xlabel('Number of clusters')\n","plt.ylabel('Silhouette Score')\n","plt.show()\n","\n","optimal_clusters = 5\n","kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', random_state=42)\n","y_kmeans = kmeans.fit_predict(X_scaled)\n","\n","df['Cluster'] = y_kmeans\n","\n","plt.figure(figsize=(10, 7))\n","sns.scatterplot(x=X[:, 0], y=X[:, 1], hue=y_kmeans, palette='viridis', s=100)\n","plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='X', label='Centroids')\n","plt.title('Customer Clusters')\n","plt.xlabel('Annual Income (k$)')\n","plt.ylabel('Spending Score (1-100)')\n","plt.legend()\n","plt.show()\n","\n","cluster_summary = df.groupby('Cluster').agg({\n","    'Age': 'mean',\n","    'Annual Income (k$)': 'mean',\n","    'Spending Score (1-100)': 'mean',\n","    'Gender': lambda x: x.value_counts().index[0]\n","}).reset_index()\n","\n","print(\"\\nCluster Summary:\")\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.cluster import KMeans\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import silhouette_score\n","import seaborn as sns\n","import io\n","\n","# Mall Customers dataset embedded directly in the code\n","data = \"\"\"\n","CustomerID,Gender,Age,Annual Income (k$),Spending Score (1-100)\n","1,Male,19,15,39\n","2,Male,21,15,81\n","3,Female,20,16,6\n","4,Female,23,16,77\n","5,Female,31,17,40\n","6,Female,22,17,76\n","7,Female,35,18,6\n","8,Female,23,18,94\n","9,Male,64,19,3\n","10,Female,30,19,72\n","11,Male,67,19,14\n","12,Female,35,19,99\n","13,Female,58,20,15\n","14,Female,24,20,77\n","15,Male,37,20,13\n","16,Male,22,20,79\n","17,Female,35,21,35\n","18,Male,20,21,66\n","19,Male,52,23,29\n","20,Female,35,23,98\n","21,Male,35,24,35\n","22,Male,25,24,73\n","23,Female,46,25,5\n","24,Male,31,25,73\n","25,Female,54,28,14\n","26,Male,29,28,82\n","27,Female,45,28,32\n","28,Male,35,28,61\n","29,Female,40,29,31\n","30,Female,23,29,87\n","31,Male,60,30,4\n","32,Female,21,30,73\n","33,Male,53,33,4\n","34,Male,18,33,92\n","35,Female,49,33,14\n","36,Female,21,33,81\n","37,Female,42,34,17\n","38,Female,30,34,73\n","39,Female,36,37,26\n","40,Female,20,37,75\n","41,Female,65,38,35\n","42,Male,24,38,92\n","43,Male,48,39,36\n","44,Female,31,39,61\n","45,Female,49,39,28\n","46,Female,24,39,65\n","47,Female,50,40,55\n","48,Female,27,40,47\n","49,Female,29,40,42\n","50,Female,31,40,42\n","51,Female,49,42,52\n","52,Male,33,42,60\n","53,Female,31,43,54\n","54,Female,59,43,60\n","55,Female,50,43,45\n","56,Female,47,43,41\n","57,Female,51,44,50\n","58,Female,69,44,46\n","59,Female,27,46,51\n","60,Male,53,46,46\n","61,Female,70,46,56\n","62,Female,19,46,55\n","63,Female,67,47,52\n","64,Female,54,47,59\n","65,Male,63,48,51\n","66,Female,18,48,59\n","67,Female,43,48,50\n","68,Female,68,48,48\n","69,Male,19,48,59\n","70,Female,32,48,47\n","71,Female,70,49,55\n","72,Female,47,49,42\n","73,Male,60,50,49\n","74,Female,60,50,56\n","75,Male,59,54,47\n","76,Female,26,54,54\n","77,Male,45,54,53\n","78,Male,40,54,48\n","79,Female,23,54,52\n","80,Female,49,54,42\n","81,Male,57,54,51\n","82,Male,38,54,55\n","83,Female,67,54,41\n","84,Female,46,54,44\n","85,Female,21,54,57\n","86,Male,48,54,46\n","87,Female,55,57,58\n","88,Female,22,57,55\n","89,Female,34,58,60\n","90,Female,50,58,46\n","91,Female,68,59,55\n","92,Male,18,59,41\n","93,Female,48,60,49\n","94,Female,40,60,40\n","95,Female,32,60,42\n","96,Male,24,60,52\n","97,Female,47,60,47\n","98,Female,27,60,50\n","99,Male,48,61,42\n","100,Female,20,61,49\n","101,Male,23,62,41\n","102,Female,49,62,48\n","103,Female,67,62,59\n","104,Female,26,62,55\n","105,Female,49,62,56\n","106,Male,21,62,42\n","107,Female,66,63,50\n","108,Male,54,63,46\n","109,Female,68,63,43\n","110,Female,66,63,48\n","111,Female,65,63,52\n","112,Female,19,63,54\n","113,Female,38,64,42\n","114,Female,19,64,46\n","115,Female,18,65,48\n","116,Female,19,65,50\n","117,Female,63,65,43\n","118,Female,49,65,59\n","119,Female,51,67,43\n","120,Female,50,67,57\n","121,Female,27,67,56\n","122,Female,38,67,40\n","123,Female,40,69,58\n","124,Male,39,69,91\n","125,Female,23,70,29\n","126,Female,31,70,77\n","127,Female,43,71,35\n","128,Male,68,71,95\n","129,Male,19,71,11\n","130,Female,32,71,75\n","131,Male,70,72,9\n","132,Female,47,72,75\n","133,Female,60,73,34\n","134,Female,60,73,71\n","135,Male,59,74,5\n","136,Female,26,74,88\n","137,Male,45,75,7\n","138,Female,40,75,73\n","139,Female,23,76,10\n","140,Female,49,76,72\n","141,Male,57,77,5\n","142,Male,38,77,93\n","143,Female,67,78,40\n","144,Female,46,78,87\n","145,Female,21,78,12\n","146,Male,48,78,97\n","147,Female,55,78,36\n","148,Female,22,78,74\n","149,Female,34,78,22\n","150,Female,50,78,90\n","151,Female,68,78,17\n","152,Male,18,78,88\n","153,Female,48,78,20\n","154,Female,40,78,76\n","155,Female,32,78,16\n","156,Male,24,78,89\n","157,Female,47,78,1\n","158,Female,27,78,78\n","159,Male,48,78,1\n","160,Female,20,78,73\n","161,Male,23,78,35\n","162,Female,49,78,93\n","163,Female,67,78,14\n","164,Female,26,78,90\n","165,Female,49,78,28\n","166,Male,21,78,83\n","167,Female,66,78,15\n","168,Male,54,78,13\n","169,Female,68,78,82\n","170,Female,66,78,34\n","171,Female,65,78,15\n","172,Female,19,78,81\n","173,Female,38,78,40\n","174,Female,19,78,83\n","175,Female,18,78,30\n","176,Female,19,78,83\n","177,Female,63,78,10\n","178,Female,49,78,92\n","179,Female,51,78,30\n","180,Female,50,78,70\n","181,Female,27,78,98\n","182,Female,38,78,35\n","183,Female,40,78,86\n","184,Male,39,78,72\n","185,Female,23,78,25\n","186,Female,31,78,73\n","187,Female,43,78,45\n","188,Male,68,78,33\n","189,Male,19,78,68\n","190,Female,32,78,89\n","191,Male,70,78,5\n","192,Female,47,78,44\n","193,Female,60,78,15\n","194,Female,60,78,39\n","195,Male,59,78,22\n","196,Female,26,78,61\n","197,Male,45,78,28\n","198,Female,40,78,82\n","199,Female,23,78,31\n","200,Female,49,78,46\n","\"\"\"\n","\n","# Load data from string\n","df = pd.read_csv(io.StringIO(data))\n","\n","# Rest of your analysis code (same as before)\n","X = df.iloc[:, [3, 4]].values\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","wcss = []\n","for i in range(1, 11):\n","    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n","    kmeans.fit(X_scaled)\n","    wcss.append(kmeans.inertia_)\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(1, 11), wcss, marker='o', linestyle='--')\n","plt.title('Elbow Method')\n","plt.xlabel('Number of clusters')\n","plt.ylabel('WCSS')\n","plt.show()\n","\n","silhouette_scores = []\n","for n_cluster in range(2, 11):\n","    kmeans = KMeans(n_clusters=n_cluster, init='k-means++', random_state=42)\n","    cluster_labels = kmeans.fit_predict(X_scaled)\n","    silhouette_avg = silhouette_score(X_scaled, cluster_labels)\n","    silhouette_scores.append(silhouette_avg)\n","    print(f\"For n_clusters = {n_cluster}, the silhouette score is {silhouette_avg}\")\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(2, 11), silhouette_scores, marker='o')\n","plt.title('Silhouette Score Analysis')\n","plt.xlabel('Number of clusters')\n","plt.ylabel('Silhouette Score')\n","plt.show()\n","\n","optimal_clusters = 5\n","kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', random_state=42)\n","y_kmeans = kmeans.fit_predict(X_scaled)\n","\n","df['Cluster'] = y_kmeans\n","\n","plt.figure(figsize=(10, 7))\n","sns.scatterplot(x=X[:, 0], y=X[:, 1], hue=y_kmeans, palette='viridis', s=100)\n","plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='X', label='Centroids')\n","plt.title('Customer Clusters')\n","plt.xlabel('Annual Income (k$)')\n","plt.ylabel('Spending Score (1-100)')\n","plt.legend()\n","plt.show()\n","\n","cluster_summary = df.groupby('Cluster').agg({\n","    'Age': 'mean',\n","    'Annual Income (k$)': 'mean',\n","    'Spending Score (1-100)': 'mean',\n","    'Gender': lambda x: x.value_counts().index[0]\n","}).reset_index()\n","\n","print(\"\\nCluster Summary:\")\n","print(cluster_summary)\n","\n","interpretation = {\n","    0: \"High Income, Low Spending - Potential targets for premium products\",\n","    1: \"Moderate Income, Moderate Spending - Average customers\",\n","    2: \"High Income, High Spending - Best customers, target for loyalty programs\",\n","    3: \"Low Income, High Spending - Budget-conscious but high spenders, target for deals and discounts\",\n","    4: \"Low Income, Low Spending - Target for basic necessities or value-based products\"\n","}\n","\n","for cluster, desc in interpretation.items():\n","    print(f\"Cluster {cluster}: {desc}\")\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.cluster import KMeans\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import silhouette_score\n","import seaborn as sns\n","import io\n","\n","# Mall Customers dataset embedded directly in the code\n","data = \"\"\"\n","CustomerID,Gender,Age,Annual Income (k$),Spending Score (1-100)\n","1,Male,19,15,39\n","2,Male,21,15,81\n","3,Female,20,16,6\n","4,Female,23,16,77\n","5,Female,31,17,40\n","6,Female,22,17,76\n","7,Female,35,18,6\n","8,Female,23,18,94\n","9,Male,64,19,3\n","10,Female,30,19,72\n","11,Male,67,19,14\n","12,Female,35,19,99\n","13,Female,58,20,15\n","14,Female,24,20,77\n","15,Male,37,20,13\n","16,Male,22,20,79\n","17,Female,35,21,35\n","18,Male,20,21,66\n","19,Male,52,23,29\n","20,Female,35,23,98\n","21,Male,35,24,35\n","22,Male,25,24,73\n","23,Female,46,25,5\n","24,Male,31,25,73\n","25,Female,54,28,14\n","26,Male,29,28,82\n","27,Female,45,28,32\n","28,Male,35,28,61\n","29,Female,40,29,31\n","30,Female,23,29,87\n","31,Male,60,30,4\n","32,Female,21,30,73\n","33,Male,53,33,4\n","34,Male,18,33,92\n","35,Female,49,33,14\n","36,Female,21,33,81\n","37,Female,42,34,17\n","38,Female,30,34,73\n","39,Female,36,37,26\n","40,Female,20,37,75\n","41,Female,65,38,35\n","42,Male,24,38,92\n","43,Male,48,39,36\n","44,Female,31,39,61\n","45,Female,49,39,28\n","46,Female,24,39,65\n","47,Female,50,40,55\n","48,Female,27,40,47\n","49,Female,29,40,42\n","50,Female,31,40,42\n","51,Female,49,42,52\n","52,Male,33,42,60\n","53,Female,31,43,54\n","54,Female,59,43,60\n","55,Female,50,43,45\n","56,Female,47,43,41\n","57,Female,51,44,50\n","58,Female,69,44,46\n","59,Female,27,46,51\n","60,Male,53,46,46\n","61,Female,70,46,56\n","62,Female,19,46,55\n","63,Female,67,47,52\n","64,Female,54,47,59\n","65,Male,63,48,51\n","66,Female,18,48,59\n","67,Female,43,48,50\n","68,Female,68,48,48\n","69,Male,19,48,59\n","70,Female,32,48,47\n","71,Female,70,49,55\n","72,Female,47,49,42\n","73,Male,60,50,49\n","74,Female,60,50,56\n","75,Male,59,54,47\n","76,Female,26,54,54\n","77,Male,45,54,53\n","78,Male,40,54,48\n","79,Female,23,54,52\n","80,Female,49,54,42\n","81,Male,57,54,51\n","82,Male,38,54,55\n","83,Female,67,54,41\n","84,Female,46,54,44\n","85,Female,21,54,57\n","86,Male,48,54,46\n","87,Female,55,57,58\n","88,Female,22,57,55\n","89,Female,34,58,60\n","90,Female,50,58,46\n","91,Female,68,59,55\n","92,Male,18,59,41\n","93,Female,48,60,49\n","94,Female,40,60,40\n","95,Female,32,60,42\n","96,Male,24,60,52\n","97,Female,47,60,47\n","98,Female,27,60,50\n","99,Male,48,61,42\n","100,Female,20,61,49\n","101,Male,23,62,41\n","102,Female,49,62,48\n","103,Female,67,62,59\n","104,Female,26,62,55\n","105,Female,49,62,56\n","106,Male,21,62,42\n","107,Female,66,63,50\n","108,Male,54,63,46\n","109,Female,68,63,43\n","110,Female,66,63,48\n","111,Female,65,63,52\n","112,Female,19,63,54\n","113,Female,38,64,42\n","114,Female,19,64,46\n","115,Female,18,65,48\n","116,Female,19,65,50\n","117,Female,63,65,43\n","118,Female,49,65,59\n","119,Female,51,67,43\n","120,Female,50,67,57\n","121,Female,27,67,56\n","122,Female,38,67,40\n","123,Female,40,69,58\n","124,Male,39,69,91\n","125,Female,23,70,29\n","126,Female,31,70,77\n","127,Female,43,71,35\n","128,Male,68,71,95\n","129,Male,19,71,11\n","130,Female,32,71,75\n","131,Male,70,72,9\n","132,Female,47,72,75\n","133,Female,60,73,34\n","134,Female,60,73,71\n","135,Male,59,74,5\n","136,Female,26,74,88\n","137,Male,45,75,7\n","138,Female,40,75,73\n","139,Female,23,76,10\n","140,Female,49,76,72\n","141,Male,57,77,5\n","142,Male,38,77,93\n","143,Female,67,78,40\n","144,Female,46,78,87\n","145,Female,21,78,12\n","146,Male,48,78,97\n","147,Female,55,78,36\n","148,Female,22,78,74\n","149,Female,34,78,22\n","150,Female,50,78,90\n","151,Female,68,78,17\n","152,Male,18,78,88\n","153,Female,48,78,20\n","154,Female,40,78,76\n","155,Female,32,78,16\n","156,Male,24,78,89\n","157,Female,47,78,1\n","158,Female,27,78,78\n","159,Male,48,78,1\n","160,Female,20,78,73\n","161,Male,23,78,35\n","162,Female,49,78,93\n","163,Female,67,78,14\n","164,Female,26,78,90\n","165,Female,49,78,28\n","166,Male,21,78,83\n","167,Female,66,78,15\n","168,Male,54,78,13\n","169,Female,68,78,82\n","170,Female,66,78,34\n","171,Female,65,78,15\n","172,Female,19,78,81\n","173,Female,38,78,40\n","174,Female,19,78,83\n","175,Female,18,78,30\n","176,Female,19,78,83\n","177,Female,63,78,10\n","178,Female,49,78,92\n","179,Female,51,78,30\n","180,Female,50,78,70\n","181,Female,27,78,98\n","182,Female,38,78,35\n","183,Female,40,78,86\n","184,Male,39,78,72\n","185,Female,23,78,25\n","186,Female,31,78,73\n","187,Female,43,78,45\n","188,Male,68,78,33\n","189,Male,19,78,68\n","190,Female,32,78,89\n","191,Male,70,78,5\n","192,Female,47,78,44\n","193,Female,60,78,15\n","194,Female,60,78,39\n","195,Male,59,78,22\n","196,Female,26,78,61\n","197,Male,45,78,28\n","198,Female,40,78,82\n","199,Female,23,78,31\n","200,Female,49,78,46\n","\"\"\"\n","\n","# Load data from string\n","df = pd.read_csv(io.StringIO(data))\n","\n","# Rest of your analysis code (same as before)\n","X = df.iloc[:, [3, 4]].values\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","wcss = []\n","for i in range(1, 11):\n","    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n","    kmeans.fit(X_scaled)\n","    wcss.append(kmeans.inertia_)\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(1, 11), wcss, marker='o', linestyle='--')\n","plt.title('Elbow Method')\n","plt.xlabel('Number of clusters')\n","plt.ylabel('WCSS')\n","plt.show()\n","\n","silhouette_scores = []\n","for n_cluster in range(2, 11):\n","    kmeans = KMeans(n_clusters=n_cluster, init='k-means++', random_state=42)\n","    cluster_labels = kmeans.fit_predict(X_scaled)\n","    silhouette_avg = silhouette_score(X_scaled, cluster_labels)\n","    silhouette_scores.append(silhouette_avg)\n","    print(f\"For n_clusters = {n_cluster}, the silhouette score is {silhouette_avg}\")\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(2, 11), silhouette_scores, marker='o')\n","plt.title('Silhouette Score Analysis')\n","plt.xlabel('Number of clusters')\n","plt.ylabel('Silhouette Score')\n","plt.show()\n","\n","optimal_clusters = 5\n","kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', random_state=42)\n","y_kmeans = kmeans.fit_predict(X_scaled)\n","\n","df['Cluster'] = y_kmeans\n","\n","plt.figure(figsize=(10, 7))\n","sns.scatterplot(x=X[:, 0], y=X[:, 1], hue=y_kmeans, palette='viridis', s=100)\n","plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='X', label='Centroids')\n","plt.title('Customer Clusters')\n","plt.xlabel('Annual Income (k$)')\n","plt.ylabel('Spending Score (1-100)')\n","plt.legend()\n","plt.show()\n","\n","cluster_summary = df.groupby('Cluster').agg({\n","    'Age': 'mean',\n","    'Annual Income (k$)': 'mean',\n","    'Spending Score (1-100)': 'mean',\n","    'Gender': lambda x: x.value_counts().index[0]\n","}).reset_index()\n","\n","print(\"\\nCluster Summary:\")\n","print(cluster_summary)\n","\n","interpretation = {\n","    0: \"High Income, Low Spending - Potential targets for premium products\",\n","    1: \"Moderate Income, Moderate Spending - Average customers\",\n","    2: \"High Income, High Spending - Best customers, target for loyalty programs\",\n","    3: \"Low Income, High Spending - Budget\",\n","    4: \"Low Income, Low Spending - Target for basic necessities or value-based products\" # Added a missing value for cluster 4\n","}\n","\n","for cluster, desc in interpretation.items():\n","    print(f\"Cluster {cluster}: {desc}\")"]},{"cell_type":"code","source":["# In Colab:\n","!git config --global user.email \"your@email.com\"\n","!git config --global user.name \"Your Name\"\n","!git add .\n","!git commit -m \"Colab execution results\"\n","!git push"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3a16E-283Edu","executionInfo":{"status":"ok","timestamp":1747546035490,"user_tz":-330,"elapsed":713,"user":{"displayName":"Shansree","userId":"15161237478988707559"}},"outputId":"4de2f0d5-8f66-4cf7-b0bf-de57294764d6"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: not a git repository (or any of the parent directories): .git\n","fatal: not a git repository (or any of the parent directories): .git\n","fatal: not a git repository (or any of the parent directories): .git\n"]}]},{"cell_type":"code","source":["!git clone https://github.com/your-username/SCT-TC-2.git\n","%cd SCT-TC-2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"duynl0qK3We7","executionInfo":{"status":"ok","timestamp":1747546108600,"user_tz":-330,"elapsed":861,"user":{"displayName":"Shansree","userId":"15161237478988707559"}},"outputId":"bc2286f9-b182-41cb-d6aa-159a782f7bd8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'SCT-TC-2'...\n","fatal: could not read Username for 'https://github.com': No such device or address\n","[Errno 2] No such file or directory: 'SCT-TC-2'\n","/content\n"]}]},{"cell_type":"code","source":["!git config --global user.email \"papzpatt9999@gmail.com\"\n","!git config --global user.name \"shansree\""],"metadata":{"id":"jRpdZbOe3enl","executionInfo":{"status":"ok","timestamp":1747546168795,"user_tz":-330,"elapsed":271,"user":{"displayName":"Shansree","userId":"15161237478988707559"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"P4VbCjld3mq8"},"execution_count":null,"outputs":[]}]}